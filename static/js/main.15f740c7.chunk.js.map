{"version":3,"sources":["components/Search.js","components/users/Users.js","components/repos/Repos.js","components/Result.js","components/users/UserItem.js","components/users/UserList.js","components/repos/RepoItem.js","components/repos/RepoList.js","App.js","serviceWorker.js","index.js"],"names":["Search","setInputValue","setStatus","onSubmit","e","preventDefault","target","elements","query","value","InputGroup","size","Input","type","name","placeholder","width","Select","onChange","Users","githubapi","userList","setUserList","List","map","apis","key","id","onClick","text","submitAPIHandler","login","Repos","repoList","setRepoList","Result","status","UserItem","items","Math","random","href","html_url","rel","Icon","filter","el","className","UserList","RepoItem","RepoList","App","useState","inputValue","isLoading","setIsLoading","error","setError","setGithubapi","useDisclosure","isOpen","onOpen","onClose","btnRef","React","useRef","api","useEffect","fetch","then","response","json","data","console","log","catch","err","ThemeProvider","CSSReset","Flex","align","h","w","p","Heading","as","color","justify","aria-label","ref","cursor","Drawer","placement","SimpleGrid","columns","gap","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.15f740c7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Input, InputRightElement, InputGroup, Select } from \"@chakra-ui/core\";\r\n\r\nconst Search = ({ setInputValue, setStatus }) => {\r\n  // SUBMIT THE SEARCHBOX QUERY\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    setInputValue(e.target.elements.query.value);\r\n  };\r\n\r\n  //TO CSWTICH BETWEEN USERS AND REPO\r\n  const statusHandler = (e) => {\r\n    setStatus(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <InputGroup size=\"lg\">\r\n        <Input type=\"text\" name=\"query\" placeholder=\"Search...\" />\r\n        <InputRightElement width=\"6rem\">\r\n          <Select onChange={statusHandler}>\r\n            <option value=\"users\">Users</option>\r\n            <option value=\"repos\">Repositories</option>\r\n          </Select>\r\n        </InputRightElement>\r\n      </InputGroup>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport { List, ListItem } from \"@chakra-ui/core\";\r\n\r\nconst Users = ({ githubapi, setInputValue, userList, setUserList }) => {\r\n  const submitAPIHandler = (apis) => {\r\n    //e.preventDefault(); //prevents refresh of page\r\n    setUserList([...userList, { text: apis, id: apis.id }]);\r\n    setInputValue(\"\");\r\n  };\r\n\r\n  return (\r\n    <List>\r\n      {githubapi.map((apis) => {\r\n        return (\r\n          <ListItem key={apis.id}>\r\n            <p\r\n              onClick={() => {\r\n                submitAPIHandler(apis);\r\n              }}\r\n            >\r\n              {apis.login}\r\n            </p>\r\n          </ListItem>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n","import React from \"react\";\r\nimport { List, ListItem } from \"@chakra-ui/core\";\r\n\r\nconst Repos = ({ githubapi, setInputValue, repoList, setRepoList }) => {\r\n  const submitAPIHandler = (apis) => {\r\n    //e.preventDefault(); //prevents refresh of page\r\n    setRepoList([...repoList, { text: apis, id: apis.id }]);\r\n    setInputValue(\"\");\r\n  };\r\n\r\n  return (\r\n    <List>\r\n      {githubapi.map((apis) => {\r\n        return (\r\n          <ListItem key={apis.id}>\r\n            <p\r\n              onClick={() => {\r\n                submitAPIHandler(apis);\r\n              }}\r\n            >\r\n              {apis.name}\r\n            </p>\r\n\r\n            {/* <p>{apis.description}</p>  */}\r\n          </ListItem>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n};\r\nexport default Repos;\r\n","import React from \"react\";\r\nimport Users from \"./users/Users\";\r\nimport Repos from \"./repos/Repos\";\r\n\r\nconst Result = ({\r\n  githubapi,\r\n  setInputValue,\r\n  userList,\r\n  setUserList,\r\n  repoList,\r\n  setRepoList,\r\n  status,\r\n}) => {\r\n  if (status === \"users\") {\r\n    return (\r\n      <Users\r\n        githubapi={githubapi}\r\n        setInputValue={setInputValue}\r\n        userList={userList}\r\n        setUserList={setUserList}\r\n      />\r\n    );\r\n  } else {\r\n    return (\r\n      <Repos\r\n        githubapi={githubapi}\r\n        setInputValue={setInputValue}\r\n        repoList={repoList}\r\n        setRepoList={setRepoList}\r\n      />\r\n    );\r\n  }\r\n};\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\nimport { Icon } from \"@chakra-ui/core\";\r\nconst UserItem = ({ text, userList, setUserList, items, key }) => {\r\n  const deleteHandler = () => {\r\n    setUserList(userList.filter((el) => el.id !== items.id));\r\n  };\r\n\r\n  return (\r\n    <table>\r\n      <tbody>\r\n        <tr>\r\n          <td>\r\n            <ul>\r\n              <li key={Math.random() * 1000}>\r\n                <a\r\n                  href={text.html_url}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  {text.login}\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </td>\r\n          <td>\r\n            <Icon onClick={deleteHandler} name=\"delete\" className=\"icon\" />\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default UserItem;\r\n","import React from \"react\";\r\nimport UserItem from \"./UserItem\";\r\n\r\nconst UserList = ({ userList, setUserList }) => {\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {userList.map((items) => (\r\n          <UserItem\r\n            setUserList={setUserList}\r\n            userList={userList}\r\n            text={items.text}\r\n            key={userList.id}\r\n            items={items}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserList;\r\n","import React from \"react\";\r\nimport { Icon } from \"@chakra-ui/core\";\r\n\r\nconst RepoItem = ({ text, repoList, setRepoList, items, key }) => {\r\n  const deleteHandler = () => {\r\n    setRepoList(repoList.filter((el) => el.id !== items.id));\r\n  };\r\n\r\n  return (\r\n    <table>\r\n      <tbody>\r\n        <tr>\r\n          <td>\r\n            <ul>\r\n              <li key={Math.random() * 1000}>\r\n                <a\r\n                  href={text.html_url}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  {text.name}\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </td>\r\n          <td>\r\n            <Icon onClick={deleteHandler} name=\"delete\" className=\"icon\" />\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default RepoItem;\r\n","import React from \"react\";\r\n\r\nimport RepoItem from \"./RepoItem\";\r\n\r\nconst RepoList = ({ repoList, setRepoList }) => {\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {repoList.map((items) => (\r\n          <RepoItem\r\n            setRepoList={setRepoList}\r\n            repoList={repoList}\r\n            text={items.text}\r\n            key={repoList.id}\r\n            items={items}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepoList;\r\n","import React, { useEffect, useState } from \"react\";\nimport {\n  ThemeProvider,\n  CSSReset,\n  Heading,\n  Flex,\n  SimpleGrid,\n  Icon,\n  Drawer,\n  DrawerBody,\n  DrawerHeader,\n  DrawerContent,\n  DrawerCloseButton,\n  useDisclosure,\n} from \"@chakra-ui/core\";\n\nimport \"./App.css\";\nimport Search from \"./components/Search\";\nimport Result from \"./components/Result\";\nimport UserList from \"./components/users/UserList\";\nimport RepoList from \"./components/repos/RepoList\";\n\nfunction App() {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [githubapi, setGithubapi] = useState([]);\n  const [status, setStatus] = useState(\"users\");\n  const [userList, setUserList] = useState([]);\n  const [repoList, setRepoList] = useState([]);\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const btnRef = React.useRef();\n\n  let api = \"\";\n  switch (status) {\n    case \"users\":\n      api = \"https://api.github.com/search/users?q=\";\n      break;\n    case \"repos\":\n      api = \"https://api.github.com/search/repositories?q=/\";\n      break;\n    default:\n      break;\n  }\n  useEffect(() => {\n    if (!inputValue) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    //make API call to Repo\n\n    fetch(api + inputValue)\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        console.log(data);\n        setIsLoading(false);\n        setGithubapi(data.items);\n      })\n      .catch((err) => {\n        setIsLoading(false);\n        setError(true);\n        console.error(err);\n      });\n  }, [inputValue]);\n\n  //make API call\n\n  return (\n    <ThemeProvider>\n      <CSSReset />\n      <Flex align=\"center\" className=\"navbar\" h=\"200px\">\n        <Flex w=\"100%\" p={30}>\n          <Heading as=\"h1\" size=\"2xl\" color=\"white\">\n            Github Bookmark App\n          </Heading>\n        </Flex>\n        <Flex w=\"100%\" p={30} justify=\"right\">\n          <Icon\n            aria-label=\"Search\"\n            name=\"search\"\n            size=\"35px\"\n            color=\"white\"\n            ref={btnRef}\n            onClick={onOpen}\n            cursor=\"pointer\"\n          />\n        </Flex>\n      </Flex>\n      <Drawer\n        isOpen={isOpen}\n        placement=\"right\"\n        onClose={onClose}\n        // finalFocusRef={btnRef}\n        size=\"sm\"\n      >\n        <DrawerContent>\n          <DrawerCloseButton onClick={onClose} />\n          <DrawerHeader>Search to bookmark!</DrawerHeader>\n\n          <DrawerBody>\n            <Search setInputValue={setInputValue} setStatus={setStatus} />\n            {isLoading && <div>Loading...</div>}\n            {error && (\n              <div>\n                Unexpected Error Occurred fetching data. Please try again later!\n              </div>\n            )}\n            <Result\n              githubapi={githubapi}\n              status={status}\n              setInputValue={setInputValue}\n              userList={userList}\n              setUserList={setUserList}\n              repoList={repoList}\n              setRepoList={setRepoList}\n            />\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n      <SimpleGrid columns={2} gap={1}>\n        <Flex justify=\"center\">\n          <Heading as=\"h3\" p={30}>\n            Your Saved Users\n          </Heading>\n        </Flex>\n        <Flex justify=\"center\">\n          <Heading as=\"h3\" p={30}>\n            Your Saved Repositories\n          </Heading>\n        </Flex>\n        <div>\n          <UserList userList={userList} setUserList={setUserList} />\n        </div>\n        <div>\n          <RepoList repoList={repoList} setRepoList={setRepoList} />\n        </div>\n      </SimpleGrid>\n    </ThemeProvider>\n  );\n}\n//todo= list\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}